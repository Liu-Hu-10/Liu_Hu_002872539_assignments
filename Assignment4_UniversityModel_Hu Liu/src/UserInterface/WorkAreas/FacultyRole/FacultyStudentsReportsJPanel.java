/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.WorkAreas.FacultyRole;
import UserInterface.WorkAreas.AdminRole.*;
import Business.Business;
import Business.Profiles.StudentDirectory;
import Business.Profiles.StudentProfile;
import Business.Profiles.Transcript;
import University.CourseCatalog.Course;
import University.CourseSchedule.CourseLoad;
import University.CourseSchedule.SeatAssignment;
import University.Department.Department;
import University.Faculty.FacultyProfile;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
/**
 *
 * @author HU
 */
public class FacultyStudentsReportsJPanel extends javax.swing.JPanel {
    private Business business;
    private String selectedSemester;
    private JPanel CardSequencePanel;
    /**
     * Creates new form StudentsReportsJPanel
     */
    public FacultyStudentsReportsJPanel(Business business, String selectedSemester, JPanel CardSequencePanel) {
        initComponents();
        this.business = business;
        this.selectedSemester = selectedSemester;
        this.CardSequencePanel = CardSequencePanel;
        populateStudentsReportsTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        Back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudentsReports = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 155, 155));

        jLabel2.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel2.setText("Students Reports");

        Back.setText("<< Back");
        Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackActionPerformed(evt);
            }
        });

        tblStudentsReports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Student Name", "Course 1 Name", "Course 1 Faculty", "Course 1 Grade", "Course 2 Name", "Course 2 Faculty", "Course 2 Grade", "Average GPA", "Tuition Fees"
            }
        ));
        jScrollPane1.setViewportView(tblStudentsReports);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Back, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(324, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                .addComponent(Back)
                .addGap(31, 31, 31))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackActionPerformed
        // TODO add your handling code here:
        // Navigate back to the AdminRoleWorkAreaJPanel
        CardSequencePanel.remove(this);
        FacultyWorkAreaJPanel facultyWorkAreaJPanel = new FacultyWorkAreaJPanel(business, CardSequencePanel);
        CardSequencePanel.add(facultyWorkAreaJPanel);
        CardSequencePanel.revalidate();
        CardSequencePanel.repaint();
        ((java.awt.CardLayout) CardSequencePanel.getLayout()).previous(CardSequencePanel);
    }//GEN-LAST:event_BackActionPerformed

private void populateStudentsReportsTable() {
    DefaultTableModel model = (DefaultTableModel) tblStudentsReports.getModel();
    model.setRowCount(0);

    Department department = retrieveDepartmentFromBusiness(business);
    if (department != null) {
        StudentDirectory studentDirectory = department.getStudentDirectory();
        for (StudentProfile studentProfile : studentDirectory.getStudentList()) {
            CourseLoad currentCourseLoad = studentProfile.getCurrentCourseLoad();
            if (currentCourseLoad != null) {
                ArrayList<SeatAssignment> seatAssignments = currentCourseLoad.getSeatAssignments();

                String course1Name = "";
                String course1Faculty = "";
                String course1Grade = "";
                String course2Name = "";
                String course2Faculty = "";
                String course2Grade = "";

                if (seatAssignments.size() > 0) {
                    SeatAssignment seatAssignment1 = seatAssignments.get(0);
                    course1Name = seatAssignment1.getAssociatedCourse().getCourseName();
                    FacultyProfile facultyProfile1 = seatAssignment1.getCourseOffer().getFacultyProfile();
                    course1Faculty = (facultyProfile1 != null) ? facultyProfile1.getName() : "Not Assigned";
                    course1Grade = String.valueOf(seatAssignment1.getGrade());
                }
                if (seatAssignments.size() > 1) {
                    SeatAssignment seatAssignment2 = seatAssignments.get(1);
                    course2Name = seatAssignment2.getAssociatedCourse().getCourseName();
                    FacultyProfile facultyProfile2 = seatAssignment2.getCourseOffer().getFacultyProfile();
                    course2Faculty = (facultyProfile2 != null) ? facultyProfile2.getName() : "Not Assigned";
                    course2Grade = String.valueOf(seatAssignment2.getGrade());
                }

                float averageGPA = studentProfile.getTranscript().calculateAverageGPAForSemester(selectedSemester);
                int totalTuitionFee = calculateTuitionFeeForStudent(studentProfile, selectedSemester);

                Object[] row = new Object[]{
                    studentProfile.getPerson().getName(),
                    course1Name,
                    course1Faculty,
                    course1Grade,
                    course2Name,
                    course2Faculty,
                    course2Grade,
                    averageGPA,
                    totalTuitionFee
                };
                model.addRow(row);
            }
        }
    }
}
       private Department retrieveDepartmentFromBusiness(Business business) {
        String departmentName = "Information Systems";
        for (Department department : business.getDepartments()) {
            if (department.getName().equals(departmentName)) {
                return department;
            }
        }
        return null;
    }
       
         private int calculateTuitionFeeForStudent(StudentProfile student, String semester) {
        Transcript transcript = student.getTranscript();
        CourseLoad courseLoad = transcript.getCourseLoadBySemester(semester);
        int totalTuitionFee = 0;
        if (courseLoad != null) {
            for (SeatAssignment seatAssignment : courseLoad.getSeatAssignments()) {
                Course course = seatAssignment.getAssociatedCourse();
                totalTuitionFee += course.getCoursePrice();
            }
        }
        return totalTuitionFee;
    }
         
         

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Back;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStudentsReports;
    // End of variables declaration//GEN-END:variables
}
